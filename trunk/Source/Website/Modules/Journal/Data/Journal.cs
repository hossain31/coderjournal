/*
 * 	Template:		This code was generated by the Coder Journal [http://www.coderjournal.com] Data Layer Template.
 * 	Created On :	8/24/2006
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace CoderJournal.Modules.Journal.Data
{
	[DataObject(true)]
	public partial class Journal : ITable<Guid?>
	{
		#region Static Methods
		
		#region Common Methods

		protected static JournalCollection FillCollection (SqlCommand command)
		{
			JournalCollection list = new JournalCollection();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[6];
						order[0] = reader.GetOrdinal("JournalID");
						order[1] = reader.GetOrdinal("Title");
						order[2] = reader.GetOrdinal("Summary");
						order[3] = reader.GetOrdinal("Updated");
						order[4] = reader.GetOrdinal("Published");
						order[5] = reader.GetOrdinal("Content");

						while (reader.Read()) 
						{
							Journal entity = new Journal();
							entity._journalID = reader.IsDBNull(0) ? (Guid?)null :  reader.GetGuid(order[0]); // JournalID
							entity._title = reader.IsDBNull(1) ? String.Empty :  reader.GetString(order[1]); // Title
							entity._summary = reader.IsDBNull(2) ? String.Empty :  reader.GetString(order[2]); // Summary
							entity._updated = reader.IsDBNull(3) ? (DateTime)SqlDateTime.MinValue :  reader.GetDateTime(order[3]); // Updated
							entity._published = reader.IsDBNull(4) ? (DateTime?)null :  reader.GetDateTime(order[4]); // Published
							entity._content = reader.IsDBNull(5) ? String.Empty :  reader.GetString(order[5]); // Content

							entity._isMarkedForDeletion = false;
							entity._isDirty = false;
							entity._isNew = entity._journalID == (Guid?)null;
							entity._autoUpdate = true;	

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static Journal FillEntity (SqlCommand command)
		{
			Journal entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new Journal();
						entity._journalID = reader.IsDBNull(0) ? (Guid?)null :  reader.GetGuid(reader.GetOrdinal("JournalID"));
						entity._title = reader.IsDBNull(1) ? String.Empty :  reader.GetString(reader.GetOrdinal("Title"));
						entity._summary = reader.IsDBNull(2) ? String.Empty :  reader.GetString(reader.GetOrdinal("Summary"));
						entity._updated = reader.IsDBNull(3) ? (DateTime)SqlDateTime.MinValue :  reader.GetDateTime(reader.GetOrdinal("Updated"));
						entity._published = reader.IsDBNull(4) ? (DateTime?)null :  reader.GetDateTime(reader.GetOrdinal("Published"));
						entity._content = reader.IsDBNull(5) ? String.Empty :  reader.GetString(reader.GetOrdinal("Content"));

						entity._isMarkedForDeletion = false;
						entity._isDirty = false;
						entity._isNew = entity._journalID == (Guid?)null;
						entity._autoUpdate = true;	
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new Journal();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalCollection GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [Journal] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalCollection GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static JournalCollection GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [Journal] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
		#endregion
		
		#region Get By Index
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetByJournalID(Guid? journalID, string orderBy)
		{
			return GetFirst("JournalID = '" + journalID + "'", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Journal GetByJournalID(Guid? journalID)
		{
			return GetByJournalID(journalID, String.Empty);
		}
		
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (Guid? journalID, string title, string summary, DateTime updated, DateTime? published, string content)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "Journal";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@JournalID", journalID);
					command.Parameters.AddWithValue("@Title", title);
					command.Parameters.AddWithValue("@Summary", summary);
					command.Parameters.AddWithValue("@Updated", updated);
					command.Parameters.AddWithValue("@Published", published);
					command.Parameters.AddWithValue("@Content", content);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (Guid? journalID, string title, string summary, DateTime updated, DateTime? published, string content)
		{
			return InsertOrUpdate(
				journalID,
				title,
				summary,
				updated,
				published,
				content
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (Journal entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.JournalID, 
				entity.Title, 
				entity.Summary, 
				entity.Updated, 
				entity.Published, 
				entity.Content
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (Guid? journalID, string title, string summary, DateTime updated, DateTime? published, string content)
		{
			return InsertOrUpdate(
				journalID,
				title,
				summary,
				updated,
				published,
				content
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (Journal entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.JournalID, 
				entity.Title, 
				entity.Summary, 
				entity.Updated, 
				entity.Published, 
				entity.Content
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (Journal entity)
		{
			entity.AcceptChanges();
			return Delete(
				entity.JournalID
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (Guid? journalID)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "Journal_Delete";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@JournalID", journalID);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
		/// <summary>			
		/// Column JournalID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Journal"</remarks>
		private Guid? _journalID = (Guid?)null;

		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Column Title : 
		/// </summary>
		private string _title = String.Empty;

		/// <summary>
		/// Column Summary : 
		/// </summary>
		private string _summary = String.Empty;

		/// <summary>
		/// Column Updated : 
		/// </summary>
		private DateTime _updated = (DateTime)SqlDateTime.MinValue;

		/// <summary>
		/// Column Published : 
		/// </summary>
		private DateTime? _published = (DateTime?)null;

		/// <summary>
		/// Column Content : 
		/// </summary>
		private string _content = String.Empty;

		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="Journal"/> instance.
		///</summary>
		///<param name="JournalID"></param>
		///<param name="Title"></param>
		///<param name="Summary"></param>
		///<param name="Updated"></param>
		///<param name="Published"></param>
		///<param name="Content"></param>
		public Journal (Guid? journalID, string title, string summary, DateTime updated, DateTime? published, string content)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
			this._journalID = journalID;
			this._title = title;
			this._summary = summary;
			this._updated = updated;
			this._published = published;
			this._content = content;
		}
		
		public Journal ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
		[Browsable(false)]
		public JournalTagLinkCollection ForeignJournalTagLinks
		{
			get 
			{
				return JournalTagLink.GetList("JournalID = '" + _journalID + "'");
			}
		}
		
		[Browsable(false)]
		public JournalUserLinkCollection ForeignJournalUserLinks
		{
			get 
			{
				return JournalUserLink.GetList("JournalID = '" + _journalID + "'");
			}
		}
		
		[Browsable(false)]
		public LinkCollection ForeignLinks
		{
			get 
			{
				return Link.GetList("JournalID = '" + _journalID + "'");
			}
		}
		
		#endregion
		
		/// <summary>Gets the JournalID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is uniqueidentifier</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, true, false, 16)]
		public Guid? JournalID
		{
			get { return this._journalID; }
		}
		
		/// <summary>Gets or sets the Title value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 75)]
		public string Title
		{
			get { return this._title; }
			set
			{
				if (_title == value)
					return;
					
				_title = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Summary value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 350)]
		public string Summary
		{
			get { return this._summary; }
			set
			{
				if (_summary == value)
					return;
					
				_summary = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Updated value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is datetime</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 8)]
		public DateTime Updated
		{
			get { return this._updated; }
			set
			{
				if (_updated == value)
					return;
					
				_updated = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Published value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is datetime</value>
		
		[Description("")]
		[DataObjectField(false, false, true, 8)]
		public DateTime? Published
		{
			get { return this._published; }
			set
			{
				if (_published == value)
					return;
					
				_published = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Content value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is text</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 16)]
		public string Content
		{
			get { return this._content; }
			set
			{
				if (_content == value)
					return;
					
				_content = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (Journal entity)
		{
			this._journalID = entity._journalID;
			this._title = entity._title;
			this._summary = entity._summary;
			this._updated = entity._updated;
			this._published = entity._published;
			this._content = entity._content;
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<Guid?> Members

		[DataObjectField(true, true, false)]
		Guid? ITable<Guid?>.PrimaryKey
		{
			get { return _journalID; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
	#region Journal Columns
	
	public enum JournalColumn
	{
		/// <summary></summary>
		JournalID,
 
		/// <summary></summary>
		Title,
 
		/// <summary></summary>
		Summary,
 
		/// <summary></summary>
		Updated,
 
		/// <summary></summary>
		Published,
 
		/// <summary></summary>
		Content 
	}
	
	#endregion
	
	#region Journal Collection
	
	public class JournalCollection : TableCollection<Guid?, Journal>
	{
	}
	
	#endregion
}