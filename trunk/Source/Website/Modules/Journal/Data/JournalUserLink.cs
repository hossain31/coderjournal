/*
 * 	Template:		This code was generated by the Coder Journal [http://www.coderjournal.com] Data Layer Template.
 * 	Created On :	8/24/2006
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace CoderJournal.Modules.Journal.Data
{
	[DataObject(true)]
	public partial class JournalUserLink : ITable<Guid>
	{
		#region Static Methods
		
		#region Common Methods

		protected static JournalUserLinkCollection FillCollection (SqlCommand command)
		{
			JournalUserLinkCollection list = new JournalUserLinkCollection();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[3];
						order[0] = reader.GetOrdinal("JournalID");
						order[1] = reader.GetOrdinal("UserID");
						order[2] = reader.GetOrdinal("EntryType");

						while (reader.Read()) 
						{
							JournalUserLink entity = new JournalUserLink();
							entity._journalID = reader.IsDBNull(0) ? Guid.Empty :  reader.GetGuid(order[0]); // JournalID
							entity._userID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(order[1]); // UserID
							entity._entryType = reader.IsDBNull(2) ? (string)null :  reader.GetString(order[2]); // EntryType

							entity._isMarkedForDeletion = false;
							entity._isDirty = false;
							entity._isNew = entity._journalID == Guid.Empty;
							entity._autoUpdate = true;	

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static JournalUserLink FillEntity (SqlCommand command)
		{
			JournalUserLink entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new JournalUserLink();
						entity._journalID = reader.IsDBNull(0) ? Guid.Empty :  reader.GetGuid(reader.GetOrdinal("JournalID"));
						entity._userID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(reader.GetOrdinal("UserID"));
						entity._entryType = reader.IsDBNull(2) ? (string)null :  reader.GetString(reader.GetOrdinal("EntryType"));

						entity._isMarkedForDeletion = false;
						entity._isDirty = false;
						entity._isNew = entity._journalID == Guid.Empty;
						entity._autoUpdate = true;	
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new JournalUserLink();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [JournalUserLink] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static JournalUserLinkCollection GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [JournalUserLink] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetByJournalID(Guid journalID, string orderBy)
		{
			return GetList("JournalID = '" + journalID + "'", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetByJournalID(Guid journalID)
		{
			return GetByJournalID(journalID, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetByUserID(int userID, string orderBy)
		{
			return GetList("UserID = " + userID, orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLinkCollection GetByUserID(int userID)
		{
			return GetByUserID(userID, String.Empty);
		}
		
		#endregion
		
		#region Get By Index
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetByJournalIDAndUserIDAndEntryType(Guid journalID, int userID, string entryType, string orderBy)
		{
			return GetFirst("JournalID = '" + journalID + "' and UserID = " + userID + " and EntryType = '" + entryType + "'", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static JournalUserLink GetByJournalIDAndUserIDAndEntryType(Guid journalID, int userID, string entryType)
		{
			return GetByJournalIDAndUserIDAndEntryType(journalID, userID, entryType, String.Empty);
		}
		
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (Guid journalID, int userID, string entryType)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "JournalUserLink";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@JournalID", journalID);
					command.Parameters.AddWithValue("@UserID", userID);
					command.Parameters.AddWithValue("@EntryType", entryType);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (Guid journalID, int userID, string entryType)
		{
			return InsertOrUpdate(
				journalID,
				userID,
				entryType
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (JournalUserLink entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.JournalID, 
				entity.UserID, 
				entity.EntryType
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (Guid journalID, int userID, string entryType)
		{
			return InsertOrUpdate(
				journalID,
				userID,
				entryType
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (JournalUserLink entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.JournalID, 
				entity.UserID, 
				entity.EntryType
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (JournalUserLink entity)
		{
			entity.AcceptChanges();
			return Delete(
				entity.JournalID, 
				entity.UserID, 
				entity.EntryType
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (Guid journalID, int userID, string entryType)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "JournalUserLink_Delete";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@JournalID", journalID);
					command.Parameters.AddWithValue("@UserID", userID);
					command.Parameters.AddWithValue("@EntryType", entryType);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
		/// <summary>			
		/// Column JournalID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "JournalUserLink"</remarks>
		private Guid _journalID = Guid.Empty;

		/// <summary>			
		/// Column UserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "JournalUserLink"</remarks>
		private int _userID = 0;

		/// <summary>			
		/// Column EntryType : An 'A' is entered if author or 'C' is entered if contributor.
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "JournalUserLink"</remarks>
		private string _entryType = (string)null;

		#endregion
		
		#region Non Primary key(s)
		
		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="JournalUserLink"/> instance.
		///</summary>
		///<param name="JournalID"></param>
		///<param name="UserID"></param>
		///<param name="EntryType">An 'A' is entered if author or 'C' is entered if contributor.</param>
		public JournalUserLink (Guid journalID, int userID, string entryType)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
			this._journalID = journalID;
			this._userID = userID;
			this._entryType = entryType;
		}
		
		public JournalUserLink ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
		[Browsable(false)]
		public User PrimaryUser
		{
			get 
			{
				return User.GetFirst("UserID = " + _userID + "");
			}
		}
		
		[Browsable(false)]
		public Journal PrimaryJournal
		{
			get 
			{
				return Journal.GetFirst("JournalID = '" + _journalID + "'");
			}
		}
		
		#endregion
		
		/// <summary>Gets the JournalID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is uniqueidentifier</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, false, false, 16)]
		public Guid JournalID
		{
			get { return this._journalID; }
		}
		
		/// <summary>Gets the UserID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, false, false, 4)]
		public int UserID
		{
			get { return this._userID; }
		}
		
		/// <summary>Gets the EntryType value for the column.</summary>
		/// <remarks>An 'A' is entered if author or 'C' is entered if contributor.</remarks>
		/// <value>This type is char</value>
		[ReadOnly(true)]
		[Description("An 'A' is entered if author or 'C' is entered if contributor.")]
		[DataObjectField(true, false, false, 1)]
		public string EntryType
		{
			get { return this._entryType; }
		}
		

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (JournalUserLink entity)
		{
			this._journalID = entity._journalID;
			this._userID = entity._userID;
			this._entryType = entity._entryType;
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<Guid> Members

		[DataObjectField(true, true, false)]
		Guid ITable<Guid>.PrimaryKey
		{
			get { return _journalID; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
	#region JournalUserLink Columns
	
	public enum JournalUserLinkColumn
	{
		/// <summary></summary>
		JournalID,
 
		/// <summary></summary>
		UserID,
 
		/// <summary>An 'A' is entered if author or 'C' is entered if contributor.</summary>
		EntryType 
	}
	
	#endregion
	
	#region JournalUserLink Collection
	
	public class JournalUserLinkCollection : TableCollection<Guid, JournalUserLink>
	{
	}
	
	#endregion
}