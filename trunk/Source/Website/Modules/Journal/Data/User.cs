/*
 * 	Template:		This code was generated by the Coder Journal [http://www.coderjournal.com] Data Layer Template.
 * 	Created On :	8/24/2006
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace CoderJournal.Modules.Journal.Data
{
	[DataObject(true)]
	public partial class User : ITable<int>
	{
		#region Static Methods
		
		#region Common Methods

		protected static UserCollection FillCollection (SqlCommand command)
		{
			UserCollection list = new UserCollection();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[5];
						order[0] = reader.GetOrdinal("UserID");
						order[1] = reader.GetOrdinal("Email");
						order[2] = reader.GetOrdinal("Password");
						order[3] = reader.GetOrdinal("Name");
						order[4] = reader.GetOrdinal("Link");

						while (reader.Read()) 
						{
							User entity = new User();
							entity._userID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(order[0]); // UserID
							entity._email = reader.IsDBNull(1) ? String.Empty :  reader.GetString(order[1]); // Email
							entity._password = reader.IsDBNull(2) ? String.Empty :  reader.GetString(order[2]); // Password
							entity._name = reader.IsDBNull(3) ? String.Empty :  reader.GetString(order[3]); // Name
							entity._link = reader.IsDBNull(4) ? (string)null :  reader.GetString(order[4]); // Link

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static User FillEntity (SqlCommand command)
		{
			User entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new User();
						entity._userID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(reader.GetOrdinal("UserID"));
						entity._email = reader.IsDBNull(1) ? String.Empty :  reader.GetString(reader.GetOrdinal("Email"));
						entity._password = reader.IsDBNull(2) ? String.Empty :  reader.GetString(reader.GetOrdinal("Password"));
						entity._name = reader.IsDBNull(3) ? String.Empty :  reader.GetString(reader.GetOrdinal("Name"));
						entity._link = reader.IsDBNull(4) ? (string)null :  reader.GetString(reader.GetOrdinal("Link"));
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new User();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static UserCollection GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [User] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static UserCollection GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static UserCollection GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [User] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
		#endregion
		
		#region Get By Index
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetByUserID(int userID, string orderBy)
		{
			return GetFirst("UserID = " + userID + "", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static User GetByUserID(int userID)
		{
			return GetByUserID(userID, String.Empty);
		}
		
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (int userID, string email, string password, string name, string link)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "User";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@UserID", userID);
					command.Parameters.AddWithValue("@Email", email);
					command.Parameters.AddWithValue("@Password", password);
					command.Parameters.AddWithValue("@Name", name);
					command.Parameters.AddWithValue("@Link", link);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (int userID, string email, string password, string name, string link)
		{
			return InsertOrUpdate(
				userID,
				email,
				password,
				name,
				link
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (User entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.UserID, 
				entity.Email, 
				entity.Password, 
				entity.Name, 
				entity.Link
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (int userID, string email, string password, string name, string link)
		{
			return InsertOrUpdate(
				userID,
				email,
				password,
				name,
				link
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (User entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.UserID, 
				entity.Email, 
				entity.Password, 
				entity.Name, 
				entity.Link
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (User entity)
		{
			entity.AcceptChanges();
			return Delete(
				entity.UserID
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (int userID)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "User_Delete";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@UserID", userID);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
		/// <summary>			
		/// Column UserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "User"</remarks>
		private int _userID = 0;

		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Column Email : 
		/// </summary>
		private string _email = String.Empty;

		/// <summary>
		/// Column Password : 
		/// </summary>
		private string _password = String.Empty;

		/// <summary>
		/// Column Name : 
		/// </summary>
		private string _name = String.Empty;

		/// <summary>
		/// Column Link : 
		/// </summary>
		private string _link = (string)null;

		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="User"/> instance.
		///</summary>
		///<param name="UserID"></param>
		///<param name="Email"></param>
		///<param name="Password"></param>
		///<param name="Name"></param>
		///<param name="Link"></param>
		public User (int userID, string email, string password, string name, string link)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
			this._userID = userID;
			this._email = email;
			this._password = password;
			this._name = name;
			this._link = link;
		}
		
		public User ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
		[Browsable(false)]
		public JournalUserLinkCollection ForeignJournalUserLinks
		{
			get 
			{
				return JournalUserLink.GetList("UserID = " + _userID + "");
			}
		}
		
		#endregion
		
		/// <summary>Gets the UserID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, true, false, 4)]
		public int UserID
		{
			get { return this._userID; }
		}
		
		/// <summary>Gets or sets the Email value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 50)]
		public string Email
		{
			get { return this._email; }
			set
			{
				if (_email == value)
					return;
					
				_email = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Password value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 255)]
		public string Password
		{
			get { return this._password; }
			set
			{
				if (_password == value)
					return;
					
				_password = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Name value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, false, 50)]
		public string Name
		{
			get { return this._name; }
			set
			{
				if (_name == value)
					return;
					
				_name = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Link value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is varchar</value>
		
		[Description("")]
		[DataObjectField(false, false, true, 255)]
		public string Link
		{
			get { return this._link; }
			set
			{
				if (_link == value)
					return;
					
				_link = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (User entity)
		{
			this._userID = entity._userID;
			this._email = entity._email;
			this._password = entity._password;
			this._name = entity._name;
			this._link = entity._link;
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<int> Members

		[DataObjectField(true, true, false)]
		int ITable<int>.PrimaryKey
		{
			get { return _userID; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
	#region User Columns
	
	public enum UserColumn
	{
		/// <summary></summary>
		UserID,
 
		/// <summary></summary>
		Email,
 
		/// <summary></summary>
		Password,
 
		/// <summary></summary>
		Name,
 
		/// <summary></summary>
		Link 
	}
	
	#endregion
	
	#region User Collection
	
	public class UserCollection : TableCollection<int, User>
	{
	}
	
	#endregion
}